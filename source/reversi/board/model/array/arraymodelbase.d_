module reversi.board.impl.arraymodelbase;

import reversi.board.impl.base;
import reversi.board.impl.stone;

import std.conv : to;

abstract class ArrayReversiModelBase : ReversiBase
{
private:
    Stone[N][N] _field;

protected:
    override void opIndexAssign(in Stone s, in int x, in int y)
    {
        assert(
            isInField(x, y),
            "Out of field ("~x.to!string~","~y.to!string~")"
        );
        _field[y][x] = s;
    }

public:

    override Stone opIndex(in int x, in int y) const
    {
        assert(
            isInField(x, y),
            "Out of field ("~x.to!string~","~y.to!string~")"
        );
        return _field[y][x];
    }

    override int countStone(in Stone stone) const
    {
        int cnt = 0;
        foreach(x; 0..fieldWidth)
            foreach(y; 0..N)
                if(this[x, y].isBlack)
                    ++cnt;
        return cnt;
    }

    override abstract int countObtainStoneWhenPut(in int x, in int y) const;

    override abstract void putStone(in int x, in int y);
    override abstract void putStoneWithSave(in int x, in int y);

    override abstract void restore();
}
